/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  NFTDutchAuction,
  NFTDutchAuctionInterface,
} from "../../contracts/NFTDutchAuction";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_erc721TokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nftTokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reservePrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_numBlocksAuctionOpen",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_offerPriceDecrement",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "addressOfOwner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "auctionEndBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "auctionEnded",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bid",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "currentPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "erc721TokenAddress",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numBlocksActionOpen",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reservePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winnerAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningBidAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014a9380380620014a98339818101604052810190620000379190620003d7565b6200005367414db0a735c6d5ba60c01b6200032f60201b60201c565b6200006f67a2670ac4a88236e660c01b6200032f60201b60201c565b846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000cb67812e9193e23067a360c01b6200032f60201b60201c565b83600181905550620000ee67b851639fc95fe2ed60c01b6200032f60201b60201c565b826005819055506200011167bf563883cf6d162b60c01b6200032f60201b60201c565b816006819055506200013467536e1f32a1fd04ab60c01b6200032f60201b60201c565b806007819055506200015767577df7504ff06d7c60c01b6200032f60201b60201c565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401620001b2919062000470565b602060405180830381865afa158015620001d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f691906200048d565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200025267136e8dc8d70ae5da60c01b6200032f60201b60201c565b436008819055506200027567365cde8405b8c8b260c01b6200032f60201b60201c565b60065443620002859190620004ee565b600481905550620002a7677cfb2ea28ed9b4c660c01b6200032f60201b60201c565b8181620002b5919062000529565b83620002c29190620004ee565b600b81905550620002e46757d8cd741cc899c160c01b6200032f60201b60201c565b600b54600c819055506200030967ace369c858276d0160c01b6200032f60201b60201c565b6000600a60006101000a81548160ff021916908315150217905550505050505062000574565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003648262000337565b9050919050565b620003768162000357565b81146200038257600080fd5b50565b60008151905062000396816200036b565b92915050565b6000819050919050565b620003b1816200039c565b8114620003bd57600080fd5b50565b600081519050620003d181620003a6565b92915050565b600080600080600060a08688031215620003f657620003f562000332565b5b6000620004068882890162000385565b95505060206200041988828901620003c0565b94505060406200042c88828901620003c0565b93505060606200043f88828901620003c0565b92505060806200045288828901620003c0565b9150509295509295909350565b6200046a816200039c565b82525050565b60006020820190506200048760008301846200045f565b92915050565b600060208284031215620004a657620004a562000332565b5b6000620004b68482850162000385565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620004fb826200039c565b915062000508836200039c565b9250828201905080821115620005235762000522620004bf565b5b92915050565b600062000536826200039c565b915062000543836200039c565b925082820262000553816200039c565b915082820484148315176200056d576200056c620004bf565b5b5092915050565b610f2580620005846000396000f3fe6080604052600436106100a75760003560e01c8063864333741161006457806386433374146101a15780639d1b464a146101cc578063a4d89dc5146101f7578063db2e1eed14610222578063df241cb91461024d578063ed7a4e0b14610278576100a7565b806307d52fa8146100ac5780631998aeef146100d75780631d0806ae146100f557806321e41eeb14610120578063559405ee1461014b5780637e83057414610176575b600080fd5b3480156100b857600080fd5b506100c16102a3565b6040516100ce9190610b3a565b60405180910390f35b6100df6102a9565b6040516100ec9190610b96565b60405180910390f35b34801561010157600080fd5b5061010a610a1f565b6040516101179190610b3a565b60405180910390f35b34801561012c57600080fd5b50610135610a25565b6040516101429190610b3a565b60405180910390f35b34801561015757600080fd5b50610160610a2b565b60405161016d9190610b3a565b60405180910390f35b34801561018257600080fd5b5061018b610a31565b6040516101989190610b3a565b60405180910390f35b3480156101ad57600080fd5b506101b6610a37565b6040516101c39190610bcc565b60405180910390f35b3480156101d857600080fd5b506101e1610a4a565b6040516101ee9190610b3a565b60405180910390f35b34801561020357600080fd5b5061020c610a50565b6040516102199190610c08565b60405180910390f35b34801561022e57600080fd5b50610237610a76565b6040516102449190610b3a565b60405180910390f35b34801561025957600080fd5b50610262610a7c565b60405161026f9190610c82565b60405180910390f35b34801561028457600080fd5b5061028d610aa0565b60405161029a9190610c08565b60405180910390f35b60045481565b60006102bf67759282fbc035efe060c01b610ac6565b6102d266fc464335f8ec9c60c01b610ac6565b6102e667c2855906fcc36a8f60c01b610ac6565b600a60009054906101000a900460ff1680156103515750600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b80156103ab5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156104b3576103c467c22e6985d1bfdd3c60c01b610ac6565b6103d867c6fc9e0f052d427b60c01b610ac6565b6103ec67535b5858875825b960c01b610ac6565b60003390506104056702071955ad164f9960c01b610ac6565b61041967cf19f020865af8b260c01b610ac6565b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561045f573d6000803e3d6000fd5b506104746774482538a4a1193f60c01b610ac6565b610488678dce7405c42dc82360c01b610ac6565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050610a1c565b6104c76768e03f0724980d9160c01b610ac6565b6104db670c44fab45fdbf69060c01b610ac6565b6104ef67ccf7bacc15064fd960c01b610ac6565b61050367c27826e47b176d2b60c01b610ac6565b600a60009054906101000a900460ff1615610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a90610cfa565b60405180910390fd5b61056767f747f6623e6a42a060c01b610ac6565b61057b67e1df8add1012ff2260c01b610ac6565b61058f67c4927b8fe9a4be0060c01b610ac6565b6105a3678cfb0f8904a651be60c01b610ac6565b60045443106105e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105de90610cfa565b60405180910390fd5b6105fb67c78d6013b7c4a93760c01b610ac6565b61060f67d969273c21d1e59460c01b610ac6565b6106236755f0591515e4ed3560c01b610ac6565b61062b610ac9565b61063f674d3413dc420c090260c01b610ac6565b610653676a95d5b5786c06c460c01b610ac6565b61066767a097ec702e28ac0360c01b610ac6565b600c543410156106ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a390610d66565b60405180910390fd5b6106c0678c9cf3eccccd90df60c01b610ac6565b6106d46790266b601a654a6560c01b610ac6565b6106e86787904f94ddaa3acc60c01b610ac6565b6106fc67bca3e8afc601713660c01b610ac6565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461078d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078490610dd2565b60405180910390fd5b6107a167e791e3ae0e75762760c01b610ac6565b6107b56787148437edb758d360c01b610ac6565b6001600a60006101000a81548160ff0219169083151502179055506107e467402a764b6e7aac4260c01b610ac6565b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061083967707394fc2d81294760c01b610ac6565b61084d67df604762eaf0b5da60c01b610ac6565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156108b5573d6000803e3d6000fd5b506108ca677a392edcabaf31c960c01b610ac6565b6108de673d9496b53a25087660c01b610ac6565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001546040518463ffffffff1660e01b815260040161098193929190610e13565b600060405180830381600087803b15801561099b57600080fd5b505af11580156109af573d6000803e3d6000fd5b505050506109c767e4ea80f3d7fc1eba60c01b610ac6565b346009819055506109e267965f0fa4295a326e60c01b610ac6565b6109f667aa27b6bbb5160dcf60c01b610ac6565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b90565b600b5481565b60065481565b60095481565b60015481565b600a60009054906101000a900460ff1681565b600c5481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b50565b610add6786aa3cf820c8cf8560c01b610ac6565b610af1674b7e1e74265608e060c01b610ac6565b60085443610aff9190610e79565b600754610b0c9190610ead565b600b54610b199190610e79565b600c81905550565b6000819050919050565b610b3481610b21565b82525050565b6000602082019050610b4f6000830184610b2b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8082610b55565b9050919050565b610b9081610b75565b82525050565b6000602082019050610bab6000830184610b87565b92915050565b60008115159050919050565b610bc681610bb1565b82525050565b6000602082019050610be16000830184610bbd565b92915050565b6000610bf282610b55565b9050919050565b610c0281610be7565b82525050565b6000602082019050610c1d6000830184610bf9565b92915050565b6000819050919050565b6000610c48610c43610c3e84610b55565b610c23565b610b55565b9050919050565b6000610c5a82610c2d565b9050919050565b6000610c6c82610c4f565b9050919050565b610c7c81610c61565b82525050565b6000602082019050610c976000830184610c73565b92915050565b600082825260208201905092915050565b7f41756374696f6e2068617320656e646564000000000000000000000000000000600082015250565b6000610ce4601183610c9d565b9150610cef82610cae565b602082019050919050565b60006020820190508181036000830152610d1381610cd7565b9050919050565b7f426964206973206c6f776572207468616e2063757272656e7420707269636500600082015250565b6000610d50601f83610c9d565b9150610d5b82610d1a565b602082019050919050565b60006020820190508181036000830152610d7f81610d43565b9050919050565b7f41756374696f6e2068617320616c7265616479206265656e20776f6e00000000600082015250565b6000610dbc601c83610c9d565b9150610dc782610d86565b602082019050919050565b60006020820190508181036000830152610deb81610daf565b9050919050565b6000610dfd82610c4f565b9050919050565b610e0d81610df2565b82525050565b6000606082019050610e286000830186610e04565b610e356020830185610e04565b610e426040830184610b2b565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e8482610b21565b9150610e8f83610b21565b9250828203905081811115610ea757610ea6610e4a565b5b92915050565b6000610eb882610b21565b9150610ec383610b21565b9250828202610ed181610b21565b91508282048414831517610ee857610ee7610e4a565b5b509291505056fea2646970667358221220c360b289878300d45056ed6c20cfbc44b4a3dde156de5df54509b24692a532e964736f6c63430008110033";

type NFTDutchAuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTDutchAuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTDutchAuction__factory extends ContractFactory {
  constructor(...args: NFTDutchAuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _erc721TokenAddress: PromiseOrValue<string>,
    _nftTokenId: PromiseOrValue<BigNumberish>,
    _reservePrice: PromiseOrValue<BigNumberish>,
    _numBlocksAuctionOpen: PromiseOrValue<BigNumberish>,
    _offerPriceDecrement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTDutchAuction> {
    return super.deploy(
      _erc721TokenAddress,
      _nftTokenId,
      _reservePrice,
      _numBlocksAuctionOpen,
      _offerPriceDecrement,
      overrides || {}
    ) as Promise<NFTDutchAuction>;
  }
  override getDeployTransaction(
    _erc721TokenAddress: PromiseOrValue<string>,
    _nftTokenId: PromiseOrValue<BigNumberish>,
    _reservePrice: PromiseOrValue<BigNumberish>,
    _numBlocksAuctionOpen: PromiseOrValue<BigNumberish>,
    _offerPriceDecrement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _erc721TokenAddress,
      _nftTokenId,
      _reservePrice,
      _numBlocksAuctionOpen,
      _offerPriceDecrement,
      overrides || {}
    );
  }
  override attach(address: string): NFTDutchAuction {
    return super.attach(address) as NFTDutchAuction;
  }
  override connect(signer: Signer): NFTDutchAuction__factory {
    return super.connect(signer) as NFTDutchAuction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTDutchAuctionInterface {
    return new utils.Interface(_abi) as NFTDutchAuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTDutchAuction {
    return new Contract(address, _abi, signerOrProvider) as NFTDutchAuction;
  }
}
